using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyMovement : MonoBehaviour, ICharacterMove
{
    public bool move { get; private set; }
    [SerializeField] private float speed;
    [SerializeField] EnemyStateManager enemyStateManager;
    private InputEnemy inputEnemy;
    private int currentMoveIndex;
    private int movesCounts;
    private Rigidbody rb;
    private PathFinding pathFinding;
    private GameModeHandler gameModeHandler;
    private List<Vector3> movePos;
    private List<PathNode> path;

    private PathNode startNode;
    private PathNode endNode;

    public int playerTargetX;
    public int playerTargetZ;

    private bool isTrigger;



    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
        inputEnemy = GetComponent<InputEnemy>();
        pathFinding = FindObjectOfType<PathFinding>();
        gameModeHandler = FindObjectOfType<GameModeHandler>();
    }
    void FixedUpdate()
    {
        MoveCharacter();
    }

    private void MoveCharacter()
    {
        if (!move) return;

        Vector3 characterPos = transform.position;
        characterPos.y = 0;
        Vector3 direction = (movePos[currentMoveIndex] - characterPos).normalized;
        direction.y = 0;
        rb.MovePosition(rb.position + direction * speed * Time.fixedDeltaTime);

        RotateCharacter(direction);

        if (Vector3.Distance(characterPos, movePos[currentMoveIndex]) < 0.1f)
        {
            if (currentMoveIndex < movesCounts - 1) currentMoveIndex++;
        }
        if (Vector3.Distance(characterPos, movePos[movesCounts - 1]) < 0.1f)
        {
            move = false;
            enemyStateManager.ActivateState(EnemyState.Idle);

            if (isTrigger) return;

            CheckIfAllEnemyFinishedMovement();
        }
    }

    private void CheckIfAllEnemyFinishedMovement()
    {
        gameModeHandler.CheckIfAllEnemyFinishMoving();
    }

    public void RotateCharacter(Vector3 direction)
    {
        Quaternion targetRotation = Quaternion.LookRotation(direction);
        targetRotation = Quaternion.RotateTowards(transform.rotation, targetRotation, 360 * Time.fixedDeltaTime);
        rb.MoveRotation(targetRotation);
    }


    public void Move(int targetX, int targetZ, int characterPosX, int characterPosZ)
    {
        if (move)
        {
            CancelMovement();
            return;
        }
        endNode = pathFinding.GetGridNode(targetX, targetZ);
        startNode = pathFinding.GetGridNode(characterPosX, characterPosZ);

        path = pathFinding.FindPath(startNode, endNode);

        movePos = new List<Vector3>();
        for (int i = 0; i < path.Count; i++) movePos.Add(new Vector3(path[i].x, 0, path[i].z));

        move = true;
        currentMoveIndex = 1;
        movesCounts = movePos.Count;
    }

    public void CancelMovement()
    {
        movesCounts = currentMoveIndex + 1;
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.layer == LayerMask.NameToLayer("Doors"))
        {
            move = false;
            enemyStateManager.ActivateState(EnemyState.Idle);
            CheckIfAllEnemyFinishedMovement();
            inputEnemy.HandleDoorCollision();
        }
    }

    public void MoveToPlayer()
    {
        isTrigger = true;
        int startX = Mathf.RoundToInt(transform.position.x);
        int startZ = Mathf.RoundToInt(transform.position.z);
        Move(playerTargetX, playerTargetZ, startX, startZ);
    }

}
