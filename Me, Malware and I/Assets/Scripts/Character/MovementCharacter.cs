using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MovementCharacter : MonoBehaviour, ICharacterMove
{
    public static event Action StopMoving;
    public static event Action StartMoving;

    public bool move { get; private set; }
    private int currentMoveIndex;
    private int movesCounts;
    private Rigidbody rb;
    private PathFinding pathFinding;
    private CharacterMoveRange characterMoveRange;
    private List<Vector3> movePos;
    private List<PathNode> path;

    private PathNode startNode;
    private PathNode endNode;

    private float speed;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
        pathFinding = FindObjectOfType<PathFinding>();
        characterMoveRange = GetComponent<CharacterMoveRange>();
    }
    private void Start()
    {
        speed = 3f;
    }
    void FixedUpdate()
    {
        if (move)  MoveCharacter();
    }

    private void MoveCharacter()
    {
        Vector3 characterPos = transform.position;
        characterPos.y = 0;
        Vector3 direction = (movePos[currentMoveIndex] - characterPos).normalized;
        direction.y = 0;
        rb.MovePosition(rb.position + direction * speed * Time.fixedDeltaTime);
        if (Vector3.Distance(characterPos, movePos[currentMoveIndex]) < 0.1f)
        {
            PathNode currentEndNode = path[currentMoveIndex];
            PathNode currentStartNode = path[currentMoveIndex - 1];
            int moveCost = pathFinding.CalculateDistnceCost(currentStartNode, currentEndNode);
            characterMoveRange.RangeDecrease(moveCost);
            if (currentMoveIndex < movesCounts - 1) currentMoveIndex++;
        } 






        if(Vector3.Distance(characterPos, movePos[movesCounts - 1]) < 0.1f)
        {
            move = false;
            StopMoving?.Invoke();
        }
    }

    public void Move(int mouseX, int mouseZ, int characterPosX, int characterPosZ)
    {
        if (move)
        {
            CancelMovement();
            return;
        }


        endNode = pathFinding.GetGridNode(mouseX, mouseZ);
        startNode = pathFinding.GetGridNode(characterPosX, characterPosZ);

        path = pathFinding.FindPath(startNode, endNode);

        movePos = new List<Vector3>();
        for (int i = 0; i < path.Count; i++)  movePos.Add(new Vector3(path[i].x, 0, path[i].z));

        move = true;
        currentMoveIndex = 1;
        movesCounts = movePos.Count;
        StartMoving?.Invoke();
    }

    public void CancelMovement()
    {
        movesCounts = currentMoveIndex + 1;
    }
}
