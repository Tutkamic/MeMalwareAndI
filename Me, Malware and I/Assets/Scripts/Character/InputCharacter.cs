using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InputCharacter : MonoBehaviour
{
    private PathFinding pathFinding;
    private PathNode startNode;
    private PathNode endNode;
    Rigidbody rigidbody;
    List<Vector3> movePos = new List<Vector3>();

    bool move = false;
    int currentMoveIndex = 0;

    private void Awake()
    {
        pathFinding = FindObjectOfType<PathFinding>();
        rigidbody = GetComponent<Rigidbody>();
    }
    void Start()
    {
        
    }

    void Update()
    {

        if (Input.GetMouseButtonDown(0))
        {
            RaycastHit hit;
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out hit))
            {
                if (hit.collider != null)
                    if (hit.transform.gameObject.layer == LayerMask.NameToLayer("Walkable"))
                    {
                        int w = (int) hit.transform.gameObject.transform.position.x;
                        int h = (int) hit.transform.gameObject.transform.position.z;
                        endNode = pathFinding.GetGridNode(w, h);
                        int x = Mathf.RoundToInt(transform.position.x);
                        int z = Mathf.RoundToInt(transform.position.z);
                        startNode = pathFinding.GetGridNode(x, z);

                        Debug.Log(endNode.gCost);

                        List<PathNode> path = pathFinding.FindPath(startNode, endNode);

                        for (int i = 0; i < path.Count; i++)
                            movePos.Add(new Vector3(path[i].x, 0, path[i].z));
                        currentMoveIndex = 1;
                        move = true;
                    }
            }
        }
    }

    private void FixedUpdate()
    {
        Move();
    }

    private void Move()
    {
        if (move)
        {
            Vector3 direction = (movePos[currentMoveIndex] - transform.position).normalized;
            direction.y = 0;
            rigidbody.MovePosition(rigidbody.position + direction * 2 * Time.fixedDeltaTime);
            if (Vector3.Distance(transform.position, movePos[currentMoveIndex]) < 1f && currentMoveIndex < movePos.Count - 1) currentMoveIndex++;
        }
    }
}
