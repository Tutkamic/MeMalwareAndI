using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InputCharacter : MonoBehaviour
{
    public static event Action<int, int, int, int> DrawLine;

    private IWalkable previourFloor;
    ICharacterMove characterMove;
    bool canMove = false;
    int lastTileX;
    int lastTileZ;

    private void Awake()
    {
        characterMove = GetComponent<ICharacterMove>();
    }

    void Update()
    {
        OnMouseOverFLoor();
        if (Input.GetMouseButtonDown(0))
        {
            characterMove.CancelMovement();
            MousePositionInput();
        }
    }

    private void OnMouseOverFLoor()
    {
        RaycastHit[] hits;
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        hits = Physics.RaycastAll(ray);

        for (int i = 0; i < hits.Length; i++)
        {
            RaycastHit hit = hits[i];
            if (hit.collider != null)
                if(hit.collider.TryGetComponent<IWalkable>(out IWalkable floor))
                {
                    if(previourFloor != null)
                        previourFloor.UnSelect();
                    floor.Select();
                    previourFloor = floor;
                }
        }
    }


    private void MousePositionInput()
    {
        RaycastHit[] hits;
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        hits = Physics.RaycastAll(ray);

        for (int i = 0; i < hits.Length; i++)
        {
            RaycastHit hit = hits[i];
            if (hit.collider != null)
                if(hit.collider.TryGetComponent<IWalkable>(out IWalkable floor))
                {
                    int w = (int)hit.transform.gameObject.transform.position.x;
                    int h = (int)hit.transform.gameObject.transform.position.z;
                    int x = Mathf.RoundToInt(transform.position.x);
                    int z = Mathf.RoundToInt(transform.position.z);

                    if ((w == x && h == z) || !floor.Selectable) return;

                    if (canMove && lastTileX == w && lastTileZ == h)
                    {
                        canMove = false;
                        characterMove.Move(w, h, x, z);
                    }

                    else
                    {
                        canMove = true;
                        DrawLine?.Invoke(w, h, x, z);
                    }

                    lastTileX = w;
                    lastTileZ = h;
                }
        }
    }
}
