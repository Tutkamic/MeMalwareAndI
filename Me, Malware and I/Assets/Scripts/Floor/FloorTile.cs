using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FloorTile : MonoBehaviour, IWalkable
{
    [SerializeField] GameObject SelectImage;
    [SerializeField] GameObject SelectableImage;
    [SerializeField] PlayerRangeSO playerRange;
    [SerializeField] GameModeSO currentGameMode;
    PathFinding pathFinding;
    public bool Selectable { get; private set; }

    private void OnEnable()
    {
        MovementCharacter.StartMoving += ResetSelectable;
    }


    private void OnDisable()
    {
        MovementCharacter.StartMoving -= ResetSelectable;
    }

    void Awake()
    {
        pathFinding = FindObjectOfType<PathFinding>();
        SelectImage.SetActive(false);
        SelectableImage.SetActive(false);
        Selectable = false;
    }


    public void SelectableChange()
    {
        SelectableImage.SetActive(Selectable);
    }

    public void Select()
    {
        SelectImage.SetActive(true);
    }

    public void UnSelect()
    {
        SelectImage.SetActive(false);
    }
    

    public void CalculateIsSelectable(float charPosX, float charPosZ)
    {
        if (playerRange.Range < 10) return;

        int x = Mathf.RoundToInt(charPosX);
        int z = Mathf.RoundToInt(charPosZ);

        PathNode startNode = pathFinding.GetGridNode(x, z);
        PathNode endNode = pathFinding.GetGridNode((int)transform.position.x, (int)transform.position.z);

        int distanceCost = pathFinding.CalculateDistnceCost(startNode, endNode);

        if (distanceCost <= playerRange.Range &&
            pathFinding.CalculatePathCost(pathFinding.FindPath(startNode, endNode)) <= playerRange.Range)
            Selectable = true;
    }

    public float DistanceCostToPlayer(float x, float z)
    {
        Vector3 playerPos = new Vector3 (x, transform.position.y, z);
        return Vector3.Distance(transform.position, playerPos) * 9;
    }

    public void ResetSelectable()
    {
        Selectable = false;
        SelectableChange();
    }

    private void Update()
    {
        if (currentGameMode.GameMode == GameMode.EnemyTour ||
            currentGameMode.GameMode == GameMode.GameOver ||
            currentGameMode.GameMode == GameMode.Pause)
        {
            UnSelect();
            Selectable = false;
            SelectableChange();
        }

        if (currentGameMode.GameMode == GameMode.VirusSelection) UnSelect();
    }
}
