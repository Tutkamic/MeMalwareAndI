using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FloorTile : MonoBehaviour, IWalkable
{
    [SerializeField] GameObject MouseOverImage;
    [SerializeField] GameObject SelectableImage;
    [SerializeField] PlayerRangeSO playerRange;
    [SerializeField] GameModeSO currentGameMode;
    [SerializeField] LayerMask layermask;
    [SerializeField] Sprite[] borderSprite;
    [SerializeField] SpriteRenderer selectableSprite;
    [SerializeField] Material selectMaterial;
    [SerializeField] private Color _emissionPasiveColorValue;
    [SerializeField] private Color _emissionActiveColorValue;
    private float _intensity;
    PathFinding pathFinding;

    private Border border;

    private Vector3[] dir = {
        new Vector3(0,0,1),
        new Vector3(1,0,1),
        new Vector3(1,0,0),
        new Vector3(1,0,-1),
        new Vector3(0,0,-1),
        new Vector3(-1,0,-1),
        new Vector3(-1,0,0),
        new Vector3(-1,0,1)
    };

    private RaycastHit[] raycastHit = new RaycastHit[8];
    public bool Selectable { get; private set; }

    private void OnEnable()
    {
        GameModeHandler.StartMode += StartNewMode;
        MovementCharacter.StartMoving += ResetSelectable;
    }


    private void OnDisable()
    {
        GameModeHandler.StartMode -= StartNewMode;
        MovementCharacter.StartMoving -= ResetSelectable;
    }

    void Awake()
    {
        pathFinding = FindObjectOfType<PathFinding>();
        MouseOverImage.SetActive(false);
        SelectableImage.SetActive(false);
        Selectable = false;
    }

    private void StartNewMode(GameMode obj)
    {
        UnSelect();
    }

    public void CheckForEdge()
    {
        for (int i = 0; i < 8; i++) 
            Physics.Raycast(transform.position, dir[i], out raycastHit[i], 0.72f, layermask);

        FindBorder();
        SetBorders();
    }


    public void SelectableChange()
    {
        SelectableImage.SetActive(Selectable);
    }

    public void Select()
    {
        if (Selectable) {
            _intensity = 7;
            selectMaterial.SetVector("_EmissionColor", _emissionActiveColorValue * _intensity);
        }
        else
        {
            _intensity = 1.5f;
            selectMaterial.SetVector("_EmissionColor", _emissionPasiveColorValue * _intensity);
        }

        MouseOverImage.SetActive(true);
    }

    public void UnSelect()
    {
        MouseOverImage.SetActive(false);
    }
    

    public void CalculateIsSelectable(float charPosX, float charPosZ)
    {
        if (playerRange.Range < 10) return;

        int x = Mathf.RoundToInt(charPosX);
        int z = Mathf.RoundToInt(charPosZ);

        PathNode startNode = pathFinding.GetGridNode(x, z);
        PathNode endNode = pathFinding.GetGridNode((int)transform.position.x, (int)transform.position.z);

        int distanceCost = pathFinding.CalculateDistnceCost(startNode, endNode);

        if (distanceCost <= playerRange.Range &&
            pathFinding.CalculatePathCost(pathFinding.FindPath(startNode, endNode)) <= playerRange.Range)
            Selectable = true;
    }

    public float DistanceCostToPlayer(float x, float z)
    {
        Vector3 playerPos = new Vector3 (x, transform.position.y, z);
        return Vector3.Distance(transform.position, playerPos) * 9;
    }

    public void ResetSelectable()
    {
        Selectable = false;
        SelectableChange();
    }

    private void LateUpdate()
    {
        if (currentGameMode.GameMode == GameMode.VirusSelection) UnSelect();
        if (currentGameMode.GameMode == GameMode.EnemyTour)
        {
            Selectable = false;
            SelectableChange();
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.layer == LayerMask.NameToLayer("Objects"))
        {
            gameObject.layer = LayerMask.NameToLayer("Default");
        }
    }
    private void OnTriggerStay(Collider other)
    {
        if (other.gameObject.layer == LayerMask.NameToLayer("Objects"))
        {
            gameObject.layer = LayerMask.NameToLayer("Default");
        }
    }
    private void OnTriggerExit(Collider other)
    {
        if (other.gameObject.layer == LayerMask.NameToLayer("Objects"))
        {
            gameObject.layer = LayerMask.NameToLayer("Default");
        }
    }


    #region Borders
    private void FindBorder()
    {
        if ((raycastHit[(int)Direction.Up].collider != null && !raycastHit[(int)Direction.Up].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Up].collider == null)
        {
            if ((raycastHit[(int)Direction.Down].collider != null && !raycastHit[(int)Direction.Down].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Down].collider == null)
            {
                if ((raycastHit[(int)Direction.Right].collider != null && !raycastHit[(int)Direction.Right].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Right].collider == null) border = Border.UpDownRight;
                else if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null) border = Border.UpDownLeft;
            }
            else if ((raycastHit[(int)Direction.Right].collider != null && !raycastHit[(int)Direction.Right].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Right].collider == null)
            {
                if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null) border = Border.UpRightLeft;
                else if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.CornerDownLeft_BorderRightBorderUp;
                else border = Border.UpRight;
            }
            else if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null)
            {
                if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null) border = Border.CornerDownRight_BorderLeftBorderUp;
                else border = Border.UpLeft;
            }
            else if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null)
            {
                if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.Up_TwoCorners;
                else border = Border.Up_CornererRight;
            }
            else if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.Up_CornerLeft;
            else border = Border.Up;
        }
        else if ((raycastHit[(int)Direction.Down].collider != null && !raycastHit[(int)Direction.Down].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Down].collider == null)
        {
            if ((raycastHit[(int)Direction.Right].collider != null && !raycastHit[(int)Direction.Right].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Right].collider == null)
            {
                if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null) border = Border.DownRightLeft;
                else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null) border = Border.CornerUpLeft_BorderRightBorderDown;
                else border = Border.DownRight;
            }
            else if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null)
            {
                if ((raycastHit[(int)Direction.UpRight].collider != null && !raycastHit[(int)Direction.UpRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpRight].collider == null) border = Border.CornerUpRight_BorderLeftBorderDown;
                else border = Border.DownLeft;
            }
            else if ((raycastHit[(int)Direction.UpRight].collider != null && !raycastHit[(int)Direction.UpRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpRight].collider == null)
            {
                if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null) border = Border.Down_TwoCorners;
                else border = Border.Down_CornerRight;
            }
            else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null) border = Border.Down_CornerLeft;
            else border = Border.Down;
        }
        else if ((raycastHit[(int)Direction.Right].collider != null && !raycastHit[(int)Direction.Right].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Right].collider == null)
        {
            if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null) border = Border.RightLeft;
            else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null)
            {
                if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.Right_TwoCorners;
                else border = Border.Right_CornerUp;
            }
            else if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.Right_CornerDown;
            else border = Border.Right;
        }
        else if ((raycastHit[(int)Direction.Left].collider != null && !raycastHit[(int)Direction.Left].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.Left].collider == null)
        {
            if ((raycastHit[(int)Direction.UpRight].collider != null && !raycastHit[(int)Direction.UpRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpRight].collider == null)
            {
                if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null) border = Border.Left_TwoCornsers;
                else border = Border.Left_CornerUp;
            }
            else if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null) border = Border.Left_CornerDown;
            else border = Border.Left;
        }
        else if (((raycastHit[(int)Direction.UpRight].collider != null && !raycastHit[(int)Direction.UpRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpRight].collider == null) &&
            ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null) &&
            ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null) &&
            ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null))
                border = Border.FourCorners;

        //corners

        else if ((raycastHit[(int)Direction.UpRight].collider != null && !raycastHit[(int)Direction.UpRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpRight].collider == null)
        {
            if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null)
            {
                if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.CornerUpRightDownRightDownLeft;
                else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null) border = Border.CornerUpRightUpLeftDownRight;
                else border = Border.CornerRightUpDown;
            }
            else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null)
            {
                if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.CornerUpRightUpLeftDownLeft;
                else border = Border.CornerUpRightLeft;
            }
            else border = Border.CornerUpRight;
        }
        else if ((raycastHit[(int)Direction.UpLeft].collider != null && !raycastHit[(int)Direction.UpLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.UpLeft].collider == null)
        {
            if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null)
            {
                if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null) border = Border.CornerUpLeftDownLeftDownRight;
                else border = Border.CornerLeftUpDown;
            }
            else border = Border.CornerUpLeft;
        }
        else if ((raycastHit[(int)Direction.DownRight].collider != null && !raycastHit[(int)Direction.DownRight].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownRight].collider == null)
        {
            if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.CornerDownRightLeft;
            else border = Border.CornerDownRight;
        }
        else if ((raycastHit[(int)Direction.DownLeft].collider != null && !raycastHit[(int)Direction.DownLeft].collider.GetComponent<FloorTile>().Selectable) || raycastHit[(int)Direction.DownLeft].collider == null) border = Border.CornerDownLeft;
        else border = Border.None;

    }
    private void SetBorders()
    {
        selectableSprite.sprite = borderSprite[(int)border];

    }

    #endregion
}
