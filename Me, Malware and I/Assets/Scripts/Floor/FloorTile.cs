using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FloorTile : MonoBehaviour, IWalkable
{
    [SerializeField] GameObject SelectImage;
    [SerializeField] GameObject SelectableImage;
    [SerializeField] PlayerRangeSO playerRange;
    [SerializeField] GameModeSO currentGameMode;
    PathFinding pathFinding;

    float playerPosX;
    float playerPosZ;
    private int currentPlayerRange;
    public bool Selectable { get; private set; }

    private void OnEnable()
    {
        CharacterStateManager.VirsuActivated += SetRange;
        MovementCharacter.StopMoving += PLayerStopMoving;
        MovementCharacter.StartMoving += ResetSelectable;
    }


    private void OnDisable()
    {
        CharacterStateManager.VirsuActivated -= SetRange;
        MovementCharacter.StopMoving -= PLayerStopMoving;
        MovementCharacter.StartMoving -= ResetSelectable;
    }

    void Awake()
    {
        pathFinding = FindObjectOfType<PathFinding>();
        SelectImage.SetActive(false);
        SelectableImage.SetActive(false);
        Selectable = false;
    }


    public void SelectableChange(bool selectable)
    {
        Selectable = selectable;
        SelectableImage.SetActive(selectable);
    }

    public void Select()
    {
        SelectImage.SetActive(true);
    }

    public void UnSelect()
    {
        SelectImage.SetActive(false);
    }
    
    private void PLayerStopMoving(float charPosX, float charPosZ, int range)
    {
        currentPlayerRange = range;
        playerPosX = charPosX;
        playerPosZ = charPosZ;

        if (currentPlayerRange > 10) CalculateIsSelectable();


    }

    private void CalculateIsSelectable()
    {
        if (currentPlayerRange < 10) return;

        int x = Mathf.RoundToInt(playerPosX);
        int z = Mathf.RoundToInt(playerPosZ);

        PathNode startNode = pathFinding.GetGridNode(x, z);
        PathNode endNode = pathFinding.GetGridNode((int)transform.position.x, (int)transform.position.z);

        int distanceCost = pathFinding.CalculateDistnceCost(startNode, endNode);
        if (distanceCost <= currentPlayerRange && pathFinding.CalculatePathCost(pathFinding.FindPath(startNode, endNode)) <= currentPlayerRange) SelectableChange(true);
    }

    private void SetRange()
    {
        ResetSelectable();
        currentPlayerRange = playerRange.Range;
        CalculateIsSelectable();
    }

    private void ResetSelectable()
    {
        SelectableChange(false);
    }

    private void Update()
    {
        if (currentGameMode.GameMode == GameMode.EnemyTour ||
            currentGameMode.GameMode == GameMode.GameOver ||
            currentGameMode.GameMode == GameMode.Pause)
        {
            UnSelect();
            SelectableChange(false);
        }

        if (currentGameMode.GameMode == GameMode.VirusSelection) UnSelect();
    }
}
