using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using System.Threading;

public class FloorManager : MonoBehaviour
{
    [SerializeField] BoolVariableSO isCalculationFinish;
    [SerializeField] PlayerRangeSO playerRange;
    private float showActiveFloorTime = 0.5f;
    private List<FloorTile> floortiles;
    private List<FloorTile> floorInRange = new List<FloorTile>();
    private Transform player;

    private void OnEnable()
    {
        CharacterStateManager.VirsuActivated += CalculateFloorSelectable;
        MovementCharacter.StopMoving += CalculateFloorSelectable;
    }


    private void OnDisable()
    {
        CharacterStateManager.VirsuActivated -= CalculateFloorSelectable;
        MovementCharacter.StopMoving -= CalculateFloorSelectable;
    }

    private void Awake()
    {
        player = FindObjectOfType<CharacterStateManager>().GetComponent<Transform>();
        floortiles = FindObjectsOfType<FloorTile>().ToList();
    }

    private void CalculateFloorSelectable()
    {
        isCalculationFinish.SetValue(false);
        floorInRange.Clear();

        foreach (var floor in floortiles)
        {
            floor.ResetSelectable();
            if (floor.DistanceCostToPlayer(player.position.x, player.position.z) <= playerRange.Range) floorInRange.Add(floor);
        }

        StartCoroutine(CalculateWithDelay());
    }
    IEnumerator CalculateWithDelay()
    {
        int index = 0;
        float timeStart = Time.time;

        foreach (var floor in floorInRange)
        {
            index++;
            floor.CalculateIsSelectable(player.position.x, player.position.z);

            if (index % 10 == 0)
                yield return null;
        }

        if (Time.time - timeStart < showActiveFloorTime)
            yield return new WaitForSeconds(showActiveFloorTime - (Time.time - timeStart));

        foreach (var floor in floorInRange)
        {
            floor.SelectableChange();
        }
        isCalculationFinish.SetValue(true);
    }
}
