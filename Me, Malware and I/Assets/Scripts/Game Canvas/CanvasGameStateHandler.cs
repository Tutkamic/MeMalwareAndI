using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class CanvasGameStateHandler : MonoBehaviour
{
    [SerializeField] private UnityEngine.UI.Button[] malwareButtons;
    [SerializeField] private Text[] malwareButtonsText;
    [SerializeField] private Image[] malwareButtonsOutline;
    [SerializeField] private UnityEngine.UI.Button changeTourButton;
    [SerializeField] private Image changeTourImage;
    [SerializeField] GameModeSO currentGameMode;

    [SerializeField] Sprite startSprite;
    [SerializeField] Sprite skipSprite;

    [SerializeField] Color activeMalwareButtonTextColor;
    [SerializeField] Color normalMalwareButtonTextColor;

    private float alphaColorInactive = 0.1f;

    private bool resetButtons;

    private void Update()
    {
        if (currentGameMode.GameMode == GameMode.VirusSelection) MalwareChooseTour();
        else if (currentGameMode.GameMode == GameMode.PlayerTour) PlayerTour();
        else if (currentGameMode.GameMode == GameMode.EnemyTour) EnemyTour();
    }
    private void Start()
    {
        SetButtonActive(false);
        ChangeTourButtonInactive();
        ButtonActive(1);
    }


    public void ButtonActive(int num)
    {
        for (int i = 0; i < malwareButtons.Length; i++)
        {
            UnselectMalwareButton(i+1);
        }
        SetActiveMalware(num);
    }

    public void SetActiveMalware(int num)
    {
        malwareButtonsText[num - 1].color = activeMalwareButtonTextColor;
        malwareButtonsOutline[num - 1].color = activeMalwareButtonTextColor;
    }

    public void UnselectMalwareButton(int num)
    {
        malwareButtonsText[num - 1].color = normalMalwareButtonTextColor;
        malwareButtonsOutline[num - 1].color = normalMalwareButtonTextColor;
    }

    private void SetButtonActive(bool isActive)
    {
        for (int i = 0; i < malwareButtons.Length; i++)
        {
            malwareButtons[i].interactable = isActive;
            float alphaColor = isActive ? 1f : alphaColorInactive;
            malwareButtonsText[i].color = new Color(malwareButtonsText[i].color.r, malwareButtonsText[i].color.g, malwareButtonsText[i].color.b, alphaColor);
            malwareButtonsOutline[i].color = new Color(malwareButtonsOutline[i].color.r, malwareButtonsOutline[i].color.g, malwareButtonsOutline[i].color.b, alphaColor);
        }
    }
    public void MalwareChooseTour()
    {
        changeTourImage.sprite = startSprite;
        SetButtonActive(true);
        ChangeTourButtonActive();
        if (resetButtons)
        {
            ButtonActive(1);
            resetButtons = false;
        }
    }

    public void PlayerTour()
    {
        SetButtonActive(false);
        changeTourImage.sprite = skipSprite;
    }

    public void EnemyTour()
    {
        resetButtons = true;
        ChangeTourButtonInactive();
    }


    private void ChangeTourButtonInactive()
    {
        changeTourButton.interactable = false;
    }
    private void ChangeTourButtonActive()
    {
        changeTourButton.interactable = true;
    }

}
