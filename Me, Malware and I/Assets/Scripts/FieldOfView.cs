using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class FieldOfView : MonoBehaviour
{
    [SerializeField] private IdleFieldOfViewDirection idleFOVDirection;
    [SerializeField] private LayerMask layerMask;
    [SerializeField] float viewDistance;
    [SerializeField] private float fov;
    [SerializeField] private float fovFactor;
    private float startingAngle;
    private Mesh mesh;
    private Vector3 origin;
    public Vector3 SetOrigin(Vector3 origin) => this.origin = origin;

    void Start()
    {
        transform.position += new Vector3(-transform.parent.position.x, 0f, -transform.parent.position.z);
        mesh = new Mesh();
        GetComponent<MeshFilter>().mesh = mesh;
    }
    private void Update()
    {
        fovFactor = ((1.3f / 45) * fov) - 0.6f;
        transform.position = Vector3.zero;
        transform.rotation = Quaternion.identity;
        SetOrigin(transform.parent.position);
    }
    private void LateUpdate()
    {
        origin.y = 0.04f;
        int rayCount = 400;
        float angle = startingAngle;
        float angleIncrease = fov / rayCount;
        
        Vector3[] vertices = new Vector3[rayCount + 1 + 1];
        Vector2[] uv = new Vector2[vertices.Length];
        int[] triangles = new int[rayCount * 3];

        vertices[0] = origin;

        int vertexIndex = 1;
        int triangleIndex = 0;
        for (int i = 0; i <= rayCount; i++)
        {
            Vector3 vertex;
            Physics.Raycast(origin, GetVectorFromAnge(angle), out RaycastHit hit,  viewDistance, layerMask);
            if (hit.collider)
            {
                vertex = hit.point;
            }
            else
            {
                vertex = origin + GetVectorFromAnge(angle) * viewDistance;
            }
            
            vertices[vertexIndex] = vertex;

            if (i > 0)
            {
                triangles[triangleIndex + 0] = 0;
                triangles[triangleIndex + 1] = vertexIndex - 1;
                triangles[triangleIndex + 2] = vertexIndex;
                triangleIndex += 3;
            }
            vertexIndex++;
            angle -= angleIncrease;
        }

        mesh.vertices = vertices;
        mesh.uv = uv;
        mesh.triangles = triangles;     
    }


    private Vector3 GetVectorFromAnge(float angle)
    {
        float angleRad = angle * (Mathf.PI/180f);
        return new Vector3(Mathf.Cos(angleRad), 0f, Mathf.Sin(angleRad));
    }
    private float GetAngleFromVectorFloat(Vector3 dir)
    {
        dir = dir.normalized;
        float n = Mathf.Atan2(dir.z, dir.x) * Mathf.Rad2Deg;
        if (n < 0) n += 360;
        return n;
    }

    public void SetAimDirection(Vector3 aimDirection)
    {
        startingAngle = GetAngleFromVectorFloat(aimDirection) - fov / fovFactor;
    }

    public void IdleStateRotation()
    {
        SetAimDirection(-idleFOVDirection.transform.right);
    }
    public void PatrolStateRotation()
    {
        SetAimDirection(-transform.parent.right);
    }
    public void TriggerStateRotation()
    {
        SetAimDirection(-transform.parent.right);
    }


}
